def main():
  return [
      # tf_version, ubuntu_version, cuda_version, bazel_version, go_version
      build_pipeline_new("1.13.1", "16.04", "10.0", "0.19.2", "1.10"),
      # old docker images are spearated
      build_pipeline("1.12.0", "16.04", "10.0", "0.16.1", "1.11"),
      build_pipeline("1.11.0", "16.04", "10.0", "0.16.1", "1.11"),
      build_pipeline("1.10.0", "16.04", "9.2", "0.16.1", "1.10"),
      build_pipeline("1.9.0", "16.04", "9.0", "0.11.0", "1.10"),
  ]


def custom_op_step(image, src_dir):
  return {
      'name': 'custom_op',
      'pull': 'never',
      'image': image,
      'commands': [
          'export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$${LD_LIBRARY_PATH}',
          'cd custom_op/user_ops',
          'cmake . -DTensorFlow_BUILD_DIR:PATH=/tensorflow_dist -DTensorFlow_SOURCE_DIR:PATH=/tensorflow_src -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2',
          'make'
      ],
  }


def inference_cc_step(image, src_dir):
  return {
      'name': 'inference_cc',
      'pull': 'never',
      'image': image,
      'commands': [
          'export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$${LD_LIBRARY_PATH}',
          'cd inference/cc/',
          'cmake . -DTensorFlow_BUILD_DIR:PATH=/tensorflow_dist -DTensorFlow_SOURCE_DIR:PATH=/tensorflow_src -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2',
          'make'
      ],
      'environment': {
          'TENSORFLOW_BUILD_DIR': '/tensorflow_dist',
          'TENSORFLOW_SOURCE_DIR': src_dir
      }
  }


def inference_c_step(image, src_dir):
  return {
      'name': 'inference_c',
      'pull': 'never',
      'image': image,
      'commands': [
          'export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$${LD_LIBRARY_PATH}',
          'cd inference/c/',
          'cmake . -DTensorFlow_BUILD_DIR:PATH=/tensorflow_dist -DTensorFlow_SOURCE_DIR:PATH=/tensorflow_src -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2',
          'make'
      ],
      'environment': {
          'TENSORFLOW_BUILD_DIR': '/tensorflow_dist',
          'TENSORFLOW_SOURCE_DIR': src_dir
      }
  }


def inference_go_step(image, tf_version, src_dir):
  return {
      'name': 'inference_go',
      'pull': 'never',
      'image': image,
      'commands': [
          'export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$${LD_LIBRARY_PATH}',
          'export LD_LIBRARY_PATH=/tensorflow_dist:$${LD_LIBRARY_PATH}',
          'export LD_LIBRARY_PATH=$${TENSORFLOW_BUILD_DIR}/:$${LD_LIBRARY_PATH}',
          'export LIBRARY_PATH=$${TENSORFLOW_BUILD_DIR}/:$${LIBRARY_PATH}',
          'WDIR=$PWD',
          'mkdir -p $GOPATH/src/github.com/tensorflow',
          'cd $GOPATH/src/github.com/tensorflow',
          'git clone -b v%s --single-branch --depth 1 https://github.com/tensorflow/tensorflow.git' % tf_version,
          'cd $WDIR',
          'cd inference/go/',
          './build.sh',
      ],
      'environment': {
          'TENSORFLOW_BUILD_DIR': '/tensorflow_dist',
          'TENSORFLOW_SOURCE_DIR': src_dir
      }
  }


def example_keras(image, src_dir):
  return {
      'name': 'example_keras',
      'pull': 'never',
      'image': image,
      'commands': [
          'export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$${LD_LIBRARY_PATH}',
          'cd examples/keras/',
          'cmake . -DTensorFlow_BUILD_DIR:PATH=/tensorflow_dist -DTensorFlow_SOURCE_DIR:PATH=/tensorflow_src -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2',
          'make',
      ],
      'environment': {
          'TENSORFLOW_BUILD_DIR': '/tensorflow_dist',
          'TENSORFLOW_SOURCE_DIR': src_dir
      }
  }


def example_simple(image, src_dir):
  return {
      'name': 'example_simple',
      'pull': 'never',
      'image': image,
      'commands': [
          'export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$${LD_LIBRARY_PATH}',
          'cd examples/simple/',
          'cmake . -DTensorFlow_BUILD_DIR:PATH=/tensorflow_dist -DTensorFlow_SOURCE_DIR:PATH=/tensorflow_src -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2',
          'make',
      ],
      'environment': {
          'TENSORFLOW_BUILD_DIR': '/tensorflow_dist',
          'TENSORFLOW_SOURCE_DIR': src_dir
      }
  }


def example_resize(image, src_dir):
  return {
      'name': 'example_resize',
      'pull': 'never',
      'image': image,
      'commands': [
          'export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$${LD_LIBRARY_PATH}',
          'cd examples/resize/',
          'cmake . -DTensorFlow_BUILD_DIR:PATH=/tensorflow_dist -DTensorFlow_SOURCE_DIR:PATH=/tensorflow_src -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2',
          'make',
      ],
      'environment': {
          'TENSORFLOW_BUILD_DIR': '/tensorflow_dist',
          'TENSORFLOW_SOURCE_DIR': src_dir
      }
  }


def event_writer(image, src_dir):
  return {
      'name': 'event_writer',
      'pull': 'never',
      'image': image,
      'commands': [
          'export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:$${LD_LIBRARY_PATH}',
          'cd examples/event_writer/',
          'cmake . -DTensorFlow_BUILD_DIR:PATH=/tensorflow_dist -DTensorFlow_SOURCE_DIR:PATH=/tensorflow_src -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python2',
          'make',
      ],
      'environment': {
          'TENSORFLOW_BUILD_DIR': '/tensorflow_dist',
          'TENSORFLOW_SOURCE_DIR': src_dir
      }
  }


def build_pipeline(tf_version, ubuntu_version, cuda_version, bazel_version, go_version):
  img = 'tensorflow:ubuntu%s-cuda%s-bazel%s-tensorflow%s' % (
      ubuntu_version, cuda_version, bazel_version, tf_version)
  img_opencv = '%s-opencv3.4.2' % img
  img_go = '%s-go%s' % (img, go_version)
  return {
      'kind': 'pipeline',
      'name': 'TensorFlow %s' % tf_version,
      'platform': {
          'os': "linux",
          'arch': 'amd64',
      },
      'steps': [
          custom_op_step(img, '/tensorflow'),
          inference_cc_step(img, '/tensorflow'),
          inference_c_step(img, '/tensorflow'),
          inference_go_step(img_go, tf_version, '/tensorflow'),
          example_keras(img, '/tensorflow'),
          example_simple(img, '/tensorflow'),
          example_resize(img_opencv, '/tensorflow'),
          event_writer(img, '/tensorflow'),
      ]
  }


def build_pipeline_new(tf_version, ubuntu_version, cuda_version, bazel_version, go_version):
  img = 'tensorflow-cmake:%s-devel' % (tf_version)
  return {
      'kind': 'pipeline',
      'name': 'TensorFlow %s' % tf_version,
      'platform': {
          'os': "linux",
          'arch': 'amd64',
      },
      'steps': [
          custom_op_step(img, '/tensorflow_src'),
          inference_cc_step(img, '/tensorflow_src'),
          inference_c_step(img, '/tensorflow_src'),
          inference_go_step(img, tf_version, '/tensorflow_src'),
          example_keras(img, '/tensorflow_src'),
          example_simple(img, '/tensorflow_src'),
          example_resize(img, '/tensorflow_src'),
          event_writer(img, '/tensorflow_src'),
      ]
  }
